<?xml version="1.0" encoding="UTF-8" ?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="build" default="compile" basedir=".">
    <import file="antlr-macrodef.xml"/>
  <property name="componet_name" value="stockton-try" />
  	<property file="local.properties" />
	<property environment="env" />
	<property name="builddir" value="build"/>
	<!-- passed from file outside -->
	<property name="dest_dir" value="${builddir}/classes"/>
	<property name="src_dir" value="${basedir}/src"/>
	<property name="gen_src_dir" value="${basedir}/res"/>
	<property name="lib_dir" value="${basedir}/lib"/>
	<path id="compile_cp">
		<fileset dir="${lib_dir}" includes="*.jar" excludes="${dest_jar}"/>
	</path>
	<property name="dest_jar" value="${builddir}/${componet_name}.jar"/>
	<property name="keystore" value="${basedir}/mykeystore"/>
	<property name="signed_jar" value="${builddir}/${componet_name}_signed.jar" />

	<property name="compile_excludes" value="none"/>


	<!-- test related start -->

	<property name="test_src_dir" value="${basedir}/testsrc"/>
	<property name="test_dest_dir" value="${builddir}/test${componet_name}"/>
	<property name="test_lib_dir" value="${basedir}/"/>
	<property name="junit_report_dir" value="${basedir}/"/>
	<path id="test_compile_cp">
		<pathelement location="${dest_dir}"/>
		<fileset dir="${lib_dir}" includes="*.jar" excludes="${dest_jar}"/>
		<fileset dir="${test_lib_dir}" includes="*.jar"/>
	</path>
	<path id="test_run_cp">
		<path refid="test_compile_cp"/>
		<pathelement location="${test_dest_dir}"/>
	</path>
	<!-- test related end -->

	<target name="clean" description="Delete old build and dist directories">
		<delete dir="${dest_dir}"/>
		<delete dir="${test_dest_dir}"/>
		<delete dir="${gen_src_dir}"/>
    </target>
    
    <target name="cleanclass" description="Delete classes only not generated source">
		<delete dir="${dest_dir}"/>
		<delete dir="${test_dest_dir}"/>
    </target>

	<target name="copyRes" >
	    <mkdir dir="${builddir}"/>
		<mkdir dir="${dest_dir}"/>
		<mkdir dir="${test_dest_dir}"/>
		<copy todir="${dest_dir}"  includeEmptyDirs="no">
			<fileset dir="${src_dir}">
	      		<exclude name="**/*.java"/>
	      		<exclude name="**/*.jj"/>
			</fileset>
			<fileset dir="${basedir}/res">
			</fileset>
		</copy>
	</target>

	<target name="compile" depends="copyRes" description="compile source files">
		<javac destdir="${dest_dir}"
			excludes="" debug="true" debuglevel="source,lines,vars"
		 fork="yes" memoryMaximumSize="500m">
			<classpath>
				<path refid="compile_cp"/>
			</classpath>
			<src>
			    <pathelement path="${gen_src_dir}"/>
			    <pathelement path="${src_dir}"/>
			</src>
			<compilerarg line="-Xlint:deprecation"/>
		</javac>
	</target>

	<target name="run" depends="" description="java run">
		<java classname="stocktonTry.TryMain" fork="true">
			<!--<jvmarg line="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=19816"/>-->
			<classpath>
				<path refid="compile_cp"/>
				<pathelement path="${dest_dir}" />
			</classpath>
		</java>
	</target>

	<target name="compile_test" depends="compile"  description="compile test files">
		<mkdir dir="${test_dest_dir}"/>
		<copy todir="${test_dest_dir}"  includeEmptyDirs="no">
			<fileset dir="${test_src_dir}">
	      		<exclude name="**/*.java"/>
	      		<exclude name="**/*.jj"/>
			</fileset>
		</copy>
		<javac destdir="${test_dest_dir}" srcdir="${test_src_dir}" debug="on"
		 fork="yes" memoryMaximumSize="500m">
			<classpath>
				 <path refid="test_compile_cp"/>
			</classpath>
			<compilerarg line="-Xlint:deprecation"/><!---->
		</javac>
	</target>

	<target name="javadoc" >
		<javadoc destdir="${src_dir}/../api"
			author="true"
			version="true"
			use="true"
			windowtitle="${componet_name} API" >
			<fileset dir="${src_dir}" />
		</javadoc>
	</target>
	<!-- pack jar file -->
	<target name="pack_with_mf"  if="MANIFEST.MF_exist">
		<echo>pack ${dest_jar} with defined MANIFEST.MF</echo>
		<jar destfile="${dest_jar}" basedir="${dest_dir}" manifest="${dest_dir}/META-INF/MANIFEST.MF"
			>
			<!--<metainf dir="${dest_dir}/META-INF" excludes="MANIFEST.MF"/>-->
		</jar>
	</target>

	<target name="pack_without_mf" unless="MANIFEST.MF_exist">
		<echo>pack ${dest_jar} without MANIFEST.MF</echo>
		<jar destfile="${dest_jar}" basedir="${dest_dir}">
			<!--<metainf dir="${dest_dir}/META-INF" excludes="MANIFEST.MF"/>-->
		</jar>
	</target>


	<target name="pack" depends="antlr, compile">
		<echo>=======pack jar file========</echo>
		<uptodate property="noChangeJar" targetfile="${dest_jar}" >
	    		<srcfiles dir= "${dest_dir}" excludes="**/*.jar"/>
	  	</uptodate>
		<antcall target="packJar" />
	</target>
	<target name="packJar" unless="noChangeJar">
		<echo>need pack Jar file ${dest_jar}</echo>
		<echo>check exist: ${dest_dir}/META-INF/MANIFEST.MF</echo>
		<available property="MANIFEST.MF_exist" file="${dest_dir}/META-INF/MANIFEST.MF"/>
		<echo>${MANIFEST.MF_exist}</echo>
		<antcall target="pack_with_mf" />
		<antcall target="pack_without_mf" />
	</target>

	<target name="sign" depends="pack" description="compile, pack and sign jar file">
		<signjar jar="${dest_jar}" signedjar="${signed_jar}"
		keystore="${keystore}" alias="www.liujing.com" storepass="000000" keypass="000000"/>
	</target>

	<!-- Junit -->
	<target name="junit" depends="compile_test" description="junit test">
		<echo>+---------------------------------------------------+</echo>
		<echo>|                                                   |</echo>
		<echo>| run Junit                                         |</echo>
		<echo>|                                                   |</echo>
		<echo>+---------------------------------------------------+</echo>

		<mkdir  dir="${junit_report_dir}"/>
		<junit  fork="true" printsummary="on" showoutput="true" dir="${test_dest_dir}">
			<sysproperty key="java.util.logging.config.file" value="logging.properties"/>
			<classpath>
				<path refid="test_run_cp"/>
			</classpath>
			<formatter type="plain"/>
			<batchtest todir="${junit_report_dir}">
				<fileset dir="${test_dest_dir}">
				 	<include name="**/JavaFileAnalysisToolTest.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="antlr" description="antlr">
	    <mkdir dir="${gen_src_dir}/liujing/jedit/parser" />
	    
	    <antlr grammar="${basedir}/antlr/Java.g" cpref="compile_cp"
	    output="${gen_src_dir}/liujing/jedit/parser" srcdir="${src_dir}"/>

	    <mkdir dir="${gen_src_dir}/org/liujing/jedit/parser" />
	    
	    <antlr grammar="${basedir}/antlr/JavaScript4Jedit.g" cpref="compile_cp"
	    output="${gen_src_dir}/org/liujing/jedit/parser" srcdir="${src_dir}"/>
	    
	    <antlr grammar="${basedir}/antlr/Antlr3.g" cpref="compile_cp"
	    output="${gen_src_dir}/org/liujing/jedit/parser" srcdir="${src_dir}"/>
	    
	    <antlr grammar="${basedir}/antlr/Python.g" cpref="compile_cp"
	    output="${gen_src_dir}/org/liujing/jedit/parser" srcdir="${src_dir}"/>
	    
	    <antlr grammar="${basedir}/antlr/CommandLine.g" cpref="compile_cp"
	    output="${gen_src_dir}/org/liujing/ironsword" srcdir="${src_dir}"/>
	    
	    <antlr grammar="${basedir}/antlr/SQLScript.g" cpref="compile_cp"
	    output="${gen_src_dir}/org/liujing/ironsword" srcdir="${src_dir}"/>
	    
	    <antlr grammar="${basedir}/antlr/MyCSS.g" cpref="compile_cp"
	    output="${gen_src_dir}/org/liujing/jedit/parser" srcdir="${src_dir}"/>
	    
	</target>
	
	<target name="init-ivy" depends="">
      <!-- try to load ivy here from ivy home, in case the user has not already dropped
              it into ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as local lib dir exists (it may be empty) and
              ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${env.IVY_HOME}/lib" includes="*.jar"/>
            <fileset dir="${env.IVY_HOME}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>
    <!-- ================================= 
          target: resolve              
         ================================= -->
    <target name="resolve" depends="init-ivy" description="--> retrieve dependencies with ivy">
        <ivy:retrieve/>
    </target>
</project>